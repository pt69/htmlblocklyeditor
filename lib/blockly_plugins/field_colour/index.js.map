{"version":3,"file":"index.js","mappings":"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","sources":["webpack://@blockly/field-colour/webpack/universalModuleDefinition","webpack://@blockly/field-colour/external umd {\"root\":\"Blockly\",\"commonjs\":\"blockly/core\",\"commonjs2\":\"blockly/core\",\"amd\":\"blockly/core\"}","webpack://@blockly/field-colour/external umd {\"root\":\"Blockly.Dart\",\"commonjs\":\"blockly/dart\",\"commonjs2\":\"blockly/dart\",\"amd\":\"blockly/dart\"}","webpack://@blockly/field-colour/external umd {\"root\":\"Blockly.JavaScript\",\"commonjs\":\"blockly/javascript\",\"commonjs2\":\"blockly/javascript\",\"amd\":\"blockly/javascript\"}","webpack://@blockly/field-colour/external umd {\"root\":\"Blockly.Lua\",\"commonjs\":\"blockly/lua\",\"commonjs2\":\"blockly/lua\",\"amd\":\"blockly/lua\"}","webpack://@blockly/field-colour/external umd {\"root\":\"Blockly.PHP\",\"commonjs\":\"blockly/php\",\"commonjs2\":\"blockly/php\",\"amd\":\"blockly/php\"}","webpack://@blockly/field-colour/external umd {\"root\":\"Blockly.Python\",\"commonjs\":\"blockly/python\",\"commonjs2\":\"blockly/python\",\"amd\":\"blockly/python\"}","webpack://@blockly/field-colour/webpack/bootstrap","webpack://@blockly/field-colour/webpack/runtime/define property getters","webpack://@blockly/field-colour/webpack/runtime/hasOwnProperty shorthand","webpack://@blockly/field-colour/webpack/runtime/make namespace object","webpack://@blockly/field-colour/./src/field_colour.ts","webpack://@blockly/field-colour/./src/blocks/colourPicker.ts","webpack://@blockly/field-colour/./src/blocks/colourRandom.ts","webpack://@blockly/field-colour/./src/blocks/colourRgb.ts","webpack://@blockly/field-colour/./src/blocks/colourBlend.ts","webpack://@blockly/field-colour/./src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"blockly/core\"), require(\"blockly/javascript\"), require(\"blockly/dart\"), require(\"blockly/lua\"), require(\"blockly/php\"), require(\"blockly/python\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"blockly/core\", \"blockly/javascript\", \"blockly/dart\", \"blockly/lua\", \"blockly/php\", \"blockly/python\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"blockly/core\"), require(\"blockly/javascript\"), require(\"blockly/dart\"), require(\"blockly/lua\"), require(\"blockly/php\"), require(\"blockly/python\")) : factory(root[\"Blockly\"], root[\"Blockly.JavaScript\"], root[\"Blockly.Dart\"], root[\"Blockly.Lua\"], root[\"Blockly.PHP\"], root[\"Blockly.Python\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, (__WEBPACK_EXTERNAL_MODULE__370__, __WEBPACK_EXTERNAL_MODULE__127__, __WEBPACK_EXTERNAL_MODULE__379__, __WEBPACK_EXTERNAL_MODULE__157__, __WEBPACK_EXTERNAL_MODULE__537__, __WEBPACK_EXTERNAL_MODULE__557__) => {\nreturn ","module.exports = __WEBPACK_EXTERNAL_MODULE__370__;","module.exports = __WEBPACK_EXTERNAL_MODULE__379__;","module.exports = __WEBPACK_EXTERNAL_MODULE__127__;","module.exports = __WEBPACK_EXTERNAL_MODULE__157__;","module.exports = __WEBPACK_EXTERNAL_MODULE__537__;","module.exports = __WEBPACK_EXTERNAL_MODULE__557__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Colour input field.\n */\n\nimport * as Blockly from 'blockly/core';\n\n/**\n * Class for a colour input field.\n */\nexport class FieldColour extends Blockly.Field<string> {\n  /** The field's colour picker element. */\n  private picker: HTMLElement | null = null;\n\n  /** Index of the currently highlighted element. */\n  private highlightedIndex: number | null = null;\n\n  /**\n   * Array holding info needed to unbind events.\n   * Used for disposing.\n   * Ex: [[node, name, func], [node, name, func]].\n   */\n  private boundEvents: Blockly.browserEvents.Data[] = [];\n\n  /**\n   * Serializable fields are saved by the serializer, non-serializable fields\n   * are not.  Editable fields should also be serializable.\n   */\n  override SERIALIZABLE = true;\n\n  /** Mouse cursor style when over the hotspot that initiates the editor. */\n  override CURSOR = 'default';\n\n  /**\n   * Used to tell if the field needs to be rendered the next time the block is\n   * rendered.  Colour fields are statically sized, and only need to be\n   * rendered at initialization.\n   */\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  protected override isDirty_ = false;\n\n  /**\n   * An array of colour strings for the palette.\n   * Copied from goog.ui.ColorPicker.SIMPLE_GRID_COLORS\n   */\n  private colours: string[] = [\n    // grays\n    '#ffffff',\n    '#cccccc',\n    '#c0c0c0',\n    '#999999',\n    '#666666',\n    '#333333',\n    '#000000',\n    // reds\n    '#ffcccc',\n    '#ff6666',\n    '#ff0000',\n    '#cc0000',\n    '#990000',\n    '#660000',\n    '#330000',\n    // oranges\n    '#ffcc99',\n    '#ff9966',\n    '#ff9900',\n    '#ff6600',\n    '#cc6600',\n    '#993300',\n    '#663300',\n    // yellows\n    '#ffff99',\n    '#ffff66',\n    '#ffcc66',\n    '#ffcc33',\n    '#cc9933',\n    '#996633',\n    '#663333',\n    // olives\n    '#ffffcc',\n    '#ffff33',\n    '#ffff00',\n    '#ffcc00',\n    '#999900',\n    '#666600',\n    '#333300',\n    // greens\n    '#99ff99',\n    '#66ff99',\n    '#33ff33',\n    '#33cc00',\n    '#009900',\n    '#006600',\n    '#003300',\n    // turquoises\n    '#99ffff',\n    '#33ffff',\n    '#66cccc',\n    '#00cccc',\n    '#339999',\n    '#336666',\n    '#003333',\n    // blues\n    '#ccffff',\n    '#66ffff',\n    '#33ccff',\n    '#3366ff',\n    '#3333ff',\n    '#000099',\n    '#000066',\n    // purples\n    '#ccccff',\n    '#9999ff',\n    '#6666cc',\n    '#6633ff',\n    '#6600cc',\n    '#333399',\n    '#330099',\n    // violets\n    '#ffccff',\n    '#ff99ff',\n    '#cc66cc',\n    '#cc33cc',\n    '#993399',\n    '#663366',\n    '#330033',\n  ];\n\n  /**\n   * An array of tooltip strings for the palette.  If not the same length as\n   * COLOURS, the colour's hex code will be used for any missing titles.\n   */\n  private titles: string[] = [];\n\n  /**\n   * Number of columns in the palette.\n   */\n  private columns = 7;\n\n  /**\n   * @param value The initial value of the field.  Should be in '#rrggbb'\n   *     format.  Defaults to the first value in the default colour array.  Also\n   *     accepts Field.SKIP_SETUP if you wish to skip setup (only used by\n   *     subclasses that want to handle configuration and setting the field\n   *     value after their own constructors have run).\n   * @param validator A function that is called to validate changes to the\n   *     field's value.  Takes in a colour string & returns a validated colour\n   *     string ('#rrggbb' format), or null to abort the change.\n   * @param config A map of options used to configure the field.\n   *     See the [field creation documentation]{@link\n   * https://developers.google.com/blockly/guides/create-custom-blocks/fields/built-in-fields/colour}\n   * for a list of properties this parameter supports.\n   */\n  constructor(\n    value?: string | typeof Blockly.Field.SKIP_SETUP,\n    validator?: FieldColourValidator,\n    config?: FieldColourConfig,\n  ) {\n    super(Blockly.Field.SKIP_SETUP);\n\n    if (value === Blockly.Field.SKIP_SETUP) return;\n    if (config) {\n      this.configure_(config);\n    }\n    this.setValue(value);\n    if (validator) {\n      this.setValidator(validator);\n    }\n  }\n\n  /**\n   * Configure the field based on the given map of options.\n   *\n   * @param config A map of options to configure the field based on.\n   */\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  protected override configure_(config: FieldColourConfig) {\n    super.configure_(config);\n    if (config.colourOptions) this.colours = config.colourOptions;\n    if (config.colourTitles) this.titles = config.colourTitles;\n    if (config.columns) this.columns = config.columns;\n  }\n\n  /**\n   * Create the block UI for this colour field.\n   *\n   * @internal\n   */\n  override initView() {\n    const constants = this.getConstants();\n    // This can't happen, but TypeScript thinks it can and lint forbids `!.`.\n    if (!constants) throw Error('Constants not found');\n    this.size_ = new Blockly.utils.Size(\n      constants.FIELD_COLOUR_DEFAULT_WIDTH,\n      constants.FIELD_COLOUR_DEFAULT_HEIGHT,\n    );\n    this.createBorderRect_();\n    this.getBorderRect().style['fillOpacity'] = '1';\n    this.getBorderRect().setAttribute('stroke', '#fff');\n    if (this.isFullBlockField()) {\n      this.clickTarget_ = (this.sourceBlock_ as Blockly.BlockSvg).getSvgRoot();\n    }\n  }\n\n  /**\n   * Defines whether this field should take up the full block or not.\n   *\n   * @returns True if this field should take up the full block. False otherwise.\n   */\n  protected isFullBlockField(): boolean {\n    const block = this.getSourceBlock();\n    if (!block) throw new Blockly.UnattachedFieldError();\n\n    const constants = this.getConstants();\n    return (\n      this.blockIsSimpleReporter() &&\n      Boolean(constants?.FIELD_COLOUR_FULL_BLOCK)\n    );\n  }\n\n  /**\n   * @returns True if the source block is a value block with a single editable\n   *     field.\n   * @internal\n   */\n  blockIsSimpleReporter(): boolean {\n    const block = this.getSourceBlock();\n    if (!block) throw new Blockly.UnattachedFieldError();\n\n    if (!block.outputConnection) return false;\n\n    for (const input of block.inputList) {\n      if (input.connection || input.fieldRow.length > 1) return false;\n    }\n    return true;\n  }\n\n  /**\n   * Updates text field to match the colour/style of the block.\n   *\n   * @internal\n   */\n  override applyColour() {\n    const block = this.getSourceBlock() as Blockly.BlockSvg | null;\n    if (!block) throw new Blockly.UnattachedFieldError();\n\n    if (!this.fieldGroup_) return;\n\n    const borderRect = this.borderRect_;\n    if (!borderRect) {\n      throw new Error('The border rect has not been initialized');\n    }\n\n    if (!this.isFullBlockField()) {\n      borderRect.style.display = 'block';\n      borderRect.style.fill = this.getValue() as string;\n    } else {\n      borderRect.style.display = 'none';\n      // In general, do *not* let fields control the color of blocks. Having the\n      // field control the color is unexpected, and could have performance\n      // impacts.\n      block.pathObject.svgPath.setAttribute('fill', this.getValue() as string);\n      block.pathObject.svgPath.setAttribute('stroke', '#fff');\n    }\n  }\n\n  /**\n   * Returns the height and width of the field.\n   *\n   * This should *in general* be the only place render_ gets called from.\n   *\n   * @returns Height and width.\n   */\n  override getSize(): Blockly.utils.Size {\n    if (this.getConstants()?.FIELD_COLOUR_FULL_BLOCK) {\n      // In general, do *not* let fields control the color of blocks. Having the\n      // field control the color is unexpected, and could have performance\n      // impacts.\n      // Full block fields have more control of the block than they should\n      // (i.e. updating fill colour) so they always need to be rerendered.\n      this.render_();\n      this.isDirty_ = false;\n    }\n    return super.getSize();\n  }\n\n  /**\n   * Updates the colour of the block to reflect whether this is a full\n   * block field or not.\n   */\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  protected override render_() {\n    super.render_();\n\n    const block = this.getSourceBlock() as Blockly.BlockSvg | null;\n    if (!block) throw new Blockly.UnattachedFieldError();\n    // Calling applyColour updates the UI (full-block vs non-full-block) for the\n    // colour field, and the colour of the field/block.\n    block.applyColour();\n  }\n\n  /**\n   * Updates the size of the field based on whether it is a full block field\n   * or not.\n   *\n   * @param margin margin to use when positioning the field.\n   */\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  protected updateSize_(margin?: number) {\n    const constants = this.getConstants();\n    if (!constants) return;\n    let totalWidth;\n    let totalHeight;\n    if (this.isFullBlockField()) {\n      const xOffset = margin ?? 0;\n      totalWidth = xOffset * 2;\n      totalHeight = constants.FIELD_TEXT_HEIGHT;\n    } else {\n      totalWidth = constants.FIELD_COLOUR_DEFAULT_WIDTH;\n      totalHeight = constants.FIELD_COLOUR_DEFAULT_HEIGHT;\n    }\n\n    this.size_.height = totalHeight;\n    this.size_.width = totalWidth;\n\n    this.positionBorderRect_();\n  }\n\n  /**\n   * Ensure that the input value is a valid colour.\n   *\n   * @param newValue The input value.\n   * @returns A valid colour, or null if invalid.\n   */\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  protected override doClassValidation_(\n    newValue: string,\n  ): string | null | undefined;\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  protected override doClassValidation_(newValue?: string): string | null;\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  protected override doClassValidation_(\n    newValue?: string,\n  ): string | null | undefined {\n    if (typeof newValue !== 'string') {\n      return null;\n    }\n    return Blockly.utils.colour.parse(newValue);\n  }\n\n  /**\n   * Get the text for this field.  Used when the block is collapsed.\n   *\n   * @returns Text representing the value of this field.\n   */\n  override getText(): string {\n    let colour = this.value_ as string;\n    // Try to use #rgb format if possible, rather than #rrggbb.\n    if (/^#(.)\\1(.)\\2(.)\\3$/.test(colour)) {\n      colour = '#' + colour[1] + colour[3] + colour[5];\n    }\n    return colour;\n  }\n\n  /**\n   * Set a custom colour grid for this field.\n   *\n   * @param colours Array of colours for this block, or null to use default\n   *     (FieldColour.COLOURS).\n   * @param titles Optional array of colour tooltips, or null to use default\n   *     (FieldColour.TITLES).\n   * @returns Returns itself (for method chaining).\n   */\n  setColours(colours: string[], titles?: string[]): FieldColour {\n    this.colours = colours;\n    if (titles) {\n      this.titles = titles;\n    }\n    return this;\n  }\n\n  /**\n   * Set a custom grid size for this field.\n   *\n   * @param columns Number of columns for this block, or 0 to use default\n   *     (FieldColour.COLUMNS).\n   * @returns Returns itself (for method chaining).\n   */\n  setColumns(columns: number): FieldColour {\n    this.columns = columns;\n    return this;\n  }\n\n  /** Create and show the colour field's editor. */\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  protected override showEditor_() {\n    this.dropdownCreate();\n    // This can't happen, but TypeScript thinks it can and lint forbids `!.`.\n    if (!this.picker) throw Error('Picker not found');\n    Blockly.DropDownDiv.getContentDiv().appendChild(this.picker);\n\n    Blockly.DropDownDiv.showPositionedByField(\n      this,\n      this.dropdownDispose.bind(this),\n    );\n\n    // Focus so we can start receiving keyboard events.\n    this.picker.focus({preventScroll: true});\n  }\n\n  /**\n   * Handle a click on a colour cell.\n   *\n   * @param e Mouse event.\n   */\n  private onClick(e: PointerEvent) {\n    const cell = e.target as Element;\n    const colour = cell && cell.getAttribute('data-colour');\n    if (colour !== null) {\n      this.setValue(colour);\n      Blockly.DropDownDiv.hideIfOwner(this);\n    }\n  }\n\n  /**\n   * Handle a key down event.  Navigate around the grid with the\n   * arrow keys.  Enter selects the highlighted colour.\n   *\n   * @param e Keyboard event.\n   */\n  private onKeyDown(e: KeyboardEvent) {\n    let handled = true;\n    let highlighted: HTMLElement | null;\n    switch (e.key) {\n      case 'ArrowUp':\n        this.moveHighlightBy(0, -1);\n        break;\n      case 'ArrowDown':\n        this.moveHighlightBy(0, 1);\n        break;\n      case 'ArrowLeft':\n        this.moveHighlightBy(-1, 0);\n        break;\n      case 'ArrowRight':\n        this.moveHighlightBy(1, 0);\n        break;\n      case 'Enter':\n        // Select the highlighted colour.\n        highlighted = this.getHighlighted();\n        if (highlighted) {\n          const colour = highlighted.getAttribute('data-colour');\n          if (colour !== null) {\n            this.setValue(colour);\n          }\n        }\n        Blockly.DropDownDiv.hideWithoutAnimation();\n        break;\n      default:\n        handled = false;\n    }\n    if (handled) {\n      e.stopPropagation();\n    }\n  }\n\n  /**\n   * Move the currently highlighted position by dx and dy.\n   *\n   * @param dx Change of x.\n   * @param dy Change of y.\n   */\n  private moveHighlightBy(dx: number, dy: number) {\n    if (!this.highlightedIndex) {\n      return;\n    }\n\n    const colours = this.colours;\n    const columns = this.columns;\n\n    // Get the current x and y coordinates.\n    let x = this.highlightedIndex % columns;\n    let y = Math.floor(this.highlightedIndex / columns);\n\n    // Add the offset.\n    x += dx;\n    y += dy;\n\n    if (dx < 0) {\n      // Move left one grid cell, even in RTL.\n      // Loop back to the end of the previous row if we have room.\n      if (x < 0 && y > 0) {\n        x = columns - 1;\n        y--;\n      } else if (x < 0) {\n        x = 0;\n      }\n    } else if (dx > 0) {\n      // Move right one grid cell, even in RTL.\n      // Loop to the start of the next row, if there's room.\n      if (x > columns - 1 && y < Math.floor(colours.length / columns) - 1) {\n        x = 0;\n        y++;\n      } else if (x > columns - 1) {\n        x--;\n      }\n    } else if (dy < 0) {\n      // Move up one grid cell, stop at the top.\n      if (y < 0) {\n        y = 0;\n      }\n    } else if (dy > 0) {\n      // Move down one grid cell, stop at the bottom.\n      if (y > Math.floor(colours.length / columns) - 1) {\n        y = Math.floor(colours.length / columns) - 1;\n      }\n    }\n\n    // Move the highlight to the new coordinates.\n    const cell = (this.picker as HTMLElement).childNodes[y].childNodes[\n      x\n    ] as Element;\n    const index = y * columns + x;\n    this.setHighlightedCell(cell, index);\n  }\n\n  /**\n   * Handle a mouse move event.  Highlight the hovered colour.\n   *\n   * @param e Mouse event.\n   */\n  private onMouseMove(e: PointerEvent) {\n    const cell = e.target as Element;\n    const index = cell && Number(cell.getAttribute('data-index'));\n    if (index !== null && index !== this.highlightedIndex) {\n      this.setHighlightedCell(cell, index);\n    }\n  }\n\n  /** Handle a mouse enter event.  Focus the picker. */\n  private onMouseEnter() {\n    this.picker?.focus({preventScroll: true});\n  }\n\n  /**\n   * Handle a mouse leave event.  Blur the picker and unhighlight\n   * the currently highlighted colour.\n   */\n  private onMouseLeave() {\n    this.picker?.blur();\n    const highlighted = this.getHighlighted();\n    if (highlighted) {\n      Blockly.utils.dom.removeClass(highlighted, 'blocklyColourHighlighted');\n    }\n  }\n\n  /**\n   * Returns the currently highlighted item (if any).\n   *\n   * @returns Highlighted item (null if none).\n   */\n  private getHighlighted(): HTMLElement | null {\n    if (!this.highlightedIndex) {\n      return null;\n    }\n\n    const x = this.highlightedIndex % this.columns;\n    const y = Math.floor(this.highlightedIndex / this.columns);\n    const row = this.picker?.childNodes[y];\n    if (!row) {\n      return null;\n    }\n    return row.childNodes[x] as HTMLElement;\n  }\n\n  /**\n   * Update the currently highlighted cell.\n   *\n   * @param cell The new cell to highlight.\n   * @param index The index of the new cell.\n   */\n  private setHighlightedCell(cell: Element, index: number) {\n    // Unhighlight the current item.\n    const highlighted = this.getHighlighted();\n    if (highlighted) {\n      Blockly.utils.dom.removeClass(highlighted, 'blocklyColourHighlighted');\n    }\n    // Highlight new item.\n    Blockly.utils.dom.addClass(cell, 'blocklyColourHighlighted');\n    // Set new highlighted index.\n    this.highlightedIndex = index;\n\n    // Update accessibility roles.\n    const cellId = cell.getAttribute('id');\n    if (cellId && this.picker) {\n      Blockly.utils.aria.setState(\n        this.picker,\n        Blockly.utils.aria.State.ACTIVEDESCENDANT,\n        cellId,\n      );\n    }\n  }\n\n  /** Create a colour picker dropdown editor. */\n  private dropdownCreate() {\n    const columns = this.columns;\n    const colours = this.colours;\n    const selectedColour = this.getValue();\n    // Create the palette.\n    const table = document.createElement('table');\n    table.className = 'blocklyColourTable';\n    table.tabIndex = 0;\n    table.dir = 'ltr';\n    Blockly.utils.aria.setRole(table, Blockly.utils.aria.Role.GRID);\n    Blockly.utils.aria.setState(table, Blockly.utils.aria.State.EXPANDED, true);\n    Blockly.utils.aria.setState(\n      table,\n      Blockly.utils.aria.State.ROWCOUNT,\n      Math.floor(colours.length / columns),\n    );\n    Blockly.utils.aria.setState(\n      table,\n      Blockly.utils.aria.State.COLCOUNT,\n      columns,\n    );\n    let row: Element | null = null;\n    for (let i = 0; i < colours.length; i++) {\n      if (i % columns === 0) {\n        row = document.createElement('tr');\n        Blockly.utils.aria.setRole(row, Blockly.utils.aria.Role.ROW);\n        table.appendChild(row);\n      }\n      const cell = document.createElement('td');\n      (row as Element).appendChild(cell);\n      // This becomes the value, if clicked.\n      cell.setAttribute('data-colour', colours[i]);\n      cell.title = this.titles[i] || colours[i];\n      cell.id = Blockly.utils.idGenerator.getNextUniqueId();\n      cell.setAttribute('data-index', `${i}`);\n      Blockly.utils.aria.setRole(cell, Blockly.utils.aria.Role.GRIDCELL);\n      Blockly.utils.aria.setState(\n        cell,\n        Blockly.utils.aria.State.LABEL,\n        colours[i],\n      );\n      Blockly.utils.aria.setState(\n        cell,\n        Blockly.utils.aria.State.SELECTED,\n        colours[i] === selectedColour,\n      );\n      cell.style.backgroundColor = colours[i];\n      if (colours[i] === selectedColour) {\n        cell.className = 'blocklyColourSelected';\n        this.highlightedIndex = i;\n      }\n    }\n\n    // Configure event handler on the table to listen for any event in a cell.\n    this.boundEvents.push(\n      Blockly.browserEvents.conditionalBind(\n        table,\n        'pointerdown',\n        this,\n        this.onClick,\n        true,\n      ),\n    );\n    this.boundEvents.push(\n      Blockly.browserEvents.conditionalBind(\n        table,\n        'pointermove',\n        this,\n        this.onMouseMove,\n        true,\n      ),\n    );\n    this.boundEvents.push(\n      Blockly.browserEvents.conditionalBind(\n        table,\n        'pointerenter',\n        this,\n        this.onMouseEnter,\n        true,\n      ),\n    );\n    this.boundEvents.push(\n      Blockly.browserEvents.conditionalBind(\n        table,\n        'pointerleave',\n        this,\n        this.onMouseLeave,\n        true,\n      ),\n    );\n    this.boundEvents.push(\n      Blockly.browserEvents.conditionalBind(\n        table,\n        'keydown',\n        this,\n        this.onKeyDown,\n        false,\n      ),\n    );\n\n    this.picker = table;\n  }\n\n  /** Disposes of events and DOM-references belonging to the colour editor. */\n  private dropdownDispose() {\n    for (const event of this.boundEvents) {\n      Blockly.browserEvents.unbind(event);\n    }\n    this.boundEvents.length = 0;\n    this.picker = null;\n    this.highlightedIndex = null;\n  }\n\n  /**\n   * Construct a FieldColour from a JSON arg object.\n   *\n   * @param options A JSON object with options (colour).\n   * @returns The new field instance.\n   * @nocollapse\n   * @internal\n   */\n  static fromJson(options: FieldColourFromJsonConfig): FieldColour {\n    // `this` might be a subclass of FieldColour if that class doesn't override\n    // the static fromJson method.\n    return new this(options.colour, undefined, options);\n  }\n}\n\n/** The default value for this field. */\nFieldColour.prototype.DEFAULT_VALUE = '#ffffff';\n\n/**\n * Register the field and any dependencies.\n */\nexport function registerFieldColour() {\n  // Unregister legacy field_colour that was in core.\n  // TODO(#2194): Delete this once core Blockly no longer defines field_colour.\n  // If field_colour is not defined in core, this generates a console warning.\n  Blockly.fieldRegistry.unregister('field_colour');\n\n  Blockly.fieldRegistry.register('field_colour', FieldColour);\n}\n\n/**\n * CSS for colour picker.\n */\nBlockly.Css.register(`\n.blocklyColourTable {\n  border-collapse: collapse;\n  display: block;\n  outline: none;\n  padding: 1px;\n}\n\n.blocklyColourTable>tr>td {\n  border: 0.5px solid #888;\n  box-sizing: border-box;\n  cursor: pointer;\n  display: inline-block;\n  height: 20px;\n  padding: 0;\n  width: 20px;\n}\n\n.blocklyColourTable>tr>td.blocklyColourHighlighted {\n  border-color: #eee;\n  box-shadow: 2px 2px 7px 2px rgba(0, 0, 0, 0.3);\n  position: relative;\n}\n\n.blocklyColourSelected, .blocklyColourSelected:hover {\n  border-color: #eee !important;\n  outline: 1px solid #333;\n  position: relative;\n}\n`);\n\n/**\n * Config options for the colour field.\n */\nexport interface FieldColourConfig extends Blockly.FieldConfig {\n  colourOptions?: string[];\n  colourTitles?: string[];\n  columns?: number;\n}\n\n/**\n * fromJson config options for the colour field.\n */\nexport interface FieldColourFromJsonConfig extends FieldColourConfig {\n  colour?: string;\n}\n\n/**\n * A function that is called to validate changes to the field's value before\n * they are set.\n *\n * @see {@link https://developers.google.com/blockly/guides/create-custom-blocks/fields/validators#return_values}\n * @param newValue The value to be validated.\n * @returns One of three instructions for setting the new value: `T`, `null`,\n * or `undefined`.\n *\n * - `T` to set this function's returned value instead of `newValue`.\n *\n * - `null` to invoke `doValueInvalid_` and not set a value.\n *\n * - `undefined` to set `newValue` as is.\n */\nexport type FieldColourValidator = Blockly.FieldValidator<string>;\n","/**\n * @license\n * Copyright 2024 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {Block, common as BlocklyCommon} from 'blockly/core';\nimport {\n  JavascriptGenerator,\n  Order as JavascriptOrder,\n} from 'blockly/javascript';\nimport {DartGenerator, Order as DartOrder} from 'blockly/dart';\nimport {LuaGenerator, Order as LuaOrder} from 'blockly/lua';\nimport {PhpGenerator, Order as PhpOrder} from 'blockly/php';\nimport {PythonGenerator, Order as PythonOrder} from 'blockly/python';\nimport {registerFieldColour} from '../field_colour';\nimport {Generators} from './generatorsType';\n\n/** The name this block is registered under. */\nexport const BLOCK_NAME = 'colour_picker';\n\n// Block for colour picker.\nconst jsonDefinition = {\n  type: BLOCK_NAME,\n  message0: '%1',\n  args0: [\n    {\n      type: 'field_colour',\n      name: 'COLOUR',\n      colour: '#ff0000',\n    },\n  ],\n  output: 'Colour',\n  helpUrl: '%{BKY_COLOUR_PICKER_HELPURL}',\n  style: 'colour_blocks',\n  tooltip: '%{BKY_COLOUR_PICKER_TOOLTIP}',\n  extensions: ['parent_tooltip_when_inline'],\n};\n\n/**\n * Javascript block generator function.\n *\n * @param block The Block instance to generate code for.\n * @param generator The JavascriptGenerator calling the function.\n * @returns A tuple containing the code string and precedence.\n */\nexport function toJavascript(\n  block: Block,\n  generator: JavascriptGenerator,\n): [string, JavascriptOrder] {\n  // Colour picker.\n  const code = generator.quote_(block.getFieldValue('COLOUR'));\n  return [code, JavascriptOrder.ATOMIC];\n}\n\n/**\n * Dart block generator function.\n *\n * @param block The Block instance to generate code for.\n * @param generator The DartGenerator calling the function.\n * @returns A tuple containing the code string and precedence.\n */\nexport function toDart(\n  block: Block,\n  generator: DartGenerator,\n): [string, DartOrder] {\n  // Colour picker.\n  const code = generator.quote_(block.getFieldValue('COLOUR'));\n  return [code, DartOrder.ATOMIC];\n}\n\n/**\n * Lua block generator function.\n *\n * @param block The Block instance to generate code for.\n * @param generator The LuaGenerator calling the function.\n * @returns A tuple containing the code string and precedence.\n */\nexport function toLua(\n  block: Block,\n  generator: LuaGenerator,\n): [string, LuaOrder] {\n  // Colour picker.\n  const code = generator.quote_(block.getFieldValue('COLOUR'));\n  return [code, LuaOrder.ATOMIC];\n}\n\n/**\n * PHP block generator function.\n *\n * @param block The Block instance to generate code for.\n * @param generator The PhpGenerator calling the function.\n * @returns A tuple containing the code string and precedence.\n */\nexport function toPhp(\n  block: Block,\n  generator: PhpGenerator,\n): [string, PhpOrder] {\n  // Colour picker.\n  const code = generator.quote_(block.getFieldValue('COLOUR'));\n  return [code, PhpOrder.ATOMIC];\n}\n\n/**\n * Python block generator function.\n *\n * @param block The Block instance to generate code for.\n * @param generator The PythonGenerator calling the function.\n * @returns A tuple containing the code string and precedence.\n */\nexport function toPython(\n  block: Block,\n  generator: PythonGenerator,\n): [string, PythonOrder] {\n  // Colour picker.\n  const code = generator.quote_(block.getFieldValue('COLOUR'));\n  return [code, PythonOrder.ATOMIC];\n}\n\nconst definitionsDict = BlocklyCommon.createBlockDefinitionsFromJsonArray([\n  jsonDefinition,\n]);\n\n/** The colour_picker BlockDefinition. */\nexport const blockDefinition = definitionsDict[BLOCK_NAME];\n\n/**\n * Install the `colour_picker` block and all of its dependencies.\n *\n * @param gens The CodeGenerators to install per-block\n *     generators on.\n */\nexport function installBlock(gens: Generators = {}) {\n  registerFieldColour();\n  BlocklyCommon.defineBlocks(definitionsDict);\n  if (gens.javascript) gens.javascript.forBlock[BLOCK_NAME] = toJavascript;\n  if (gens.dart) gens.dart.forBlock[BLOCK_NAME] = toDart;\n  if (gens.lua) gens.lua.forBlock[BLOCK_NAME] = toLua;\n  if (gens.php) gens.php.forBlock[BLOCK_NAME] = toPhp;\n  if (gens.python) gens.python.forBlock[BLOCK_NAME] = toPython;\n}\n","/**\n * @license\n * Copyright 2024 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {Block, common as BlocklyCommon} from 'blockly/core';\nimport {\n  JavascriptGenerator,\n  Order as JavascriptOrder,\n} from 'blockly/javascript';\nimport {DartGenerator, Order as DartOrder} from 'blockly/dart';\nimport {LuaGenerator, Order as LuaOrder} from 'blockly/lua';\nimport {PhpGenerator, Order as PhpOrder} from 'blockly/php';\nimport {PythonGenerator, Order as PythonOrder} from 'blockly/python';\nimport {registerFieldColour} from '../field_colour';\nimport {Generators} from './generatorsType';\n\n/** The name this block is registered under. */\nexport const BLOCK_NAME = 'colour_random';\n\n// Block for random colour.\nconst jsonDefinition = {\n  type: BLOCK_NAME,\n  message0: '%{BKY_COLOUR_RANDOM_TITLE}',\n  output: 'Colour',\n  helpUrl: '%{BKY_COLOUR_RANDOM_HELPURL}',\n  style: 'colour_blocks',\n  tooltip: '%{BKY_COLOUR_RANDOM_TOOLTIP}',\n};\n\n/**\n * Javascript block generator function.\n *\n * @param block The Block instance to generate code for.\n * @param generator The JavascriptGenerator calling the function.\n * @returns A tuple containing the code string and precedence.\n */\nexport function toJavascript(\n  block: Block,\n  generator: JavascriptGenerator,\n): [string, JavascriptOrder] {\n  // Generate a random colour.\n  const functionName = generator.provideFunction_(\n    'colourRandom',\n    `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}() {\n  var num = Math.floor(Math.random() * 0x1000000);\n  return '#' + ('00000' + num.toString(16)).substr(-6);\n}\n`,\n  );\n  const code = functionName + '()';\n  return [code, JavascriptOrder.FUNCTION_CALL];\n}\n\n/**\n * Dart block generator function.\n *\n * @param block The Block instance to generate code for.\n * @param generator The DartGenerator calling the function.\n * @returns A tuple containing the code string and precedence.\n */\nexport function toDart(\n  block: Block,\n  generator: DartGenerator,\n): [string, DartOrder] {\n  // Generate a random colour.\n  // TODO(#7600): find better approach than casting to any to override\n  // CodeGenerator declaring .definitions protected.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (generator as any).definitions_['import_dart_math'] =\n    \"import 'dart:math' as Math;\";\n  const functionName = generator.provideFunction_(\n    'colour_random',\n    `\nString ${generator.FUNCTION_NAME_PLACEHOLDER_}() {\n  String hex = '0123456789abcdef';\n  var rnd = new Math.Random();\n  return '#\\${hex[rnd.nextInt(16)]}\\${hex[rnd.nextInt(16)]}'\n      '\\${hex[rnd.nextInt(16)]}\\${hex[rnd.nextInt(16)]}'\n      '\\${hex[rnd.nextInt(16)]}\\${hex[rnd.nextInt(16)]}';\n}\n`,\n  );\n  const code = functionName + '()';\n  return [code, DartOrder.UNARY_POSTFIX];\n}\n\n/**\n * Lua block generator function.\n *\n * @param block The Block instance to generate code for.\n * @param generator The LuaGenerator calling the function.\n * @returns A tuple containing the code string and precedence.\n */\nexport function toLua(\n  block: Block,\n  generator: LuaGenerator,\n): [string, LuaOrder] {\n  // Generate a random colour.\n  const code = 'string.format(\"#%06x\", math.random(0, 2^24 - 1))';\n  return [code, LuaOrder.HIGH];\n}\n\n/**\n * PHP block generator function.\n *\n * @param block The Block instance to generate code for.\n * @param generator The PhpGenerator calling the function.\n * @returns A tuple containing the code string and precedence.\n */\nexport function toPhp(\n  block: Block,\n  generator: PhpGenerator,\n): [string, PhpOrder] {\n  // Generate a random colour.\n  const functionName = generator.provideFunction_(\n    'colour_random',\n    `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}() {\n  return '#' . str_pad(dechex(mt_rand(0, 0xFFFFFF)), 6, '0', STR_PAD_LEFT);\n}\n`,\n  );\n  const code = functionName + '()';\n  return [code, PhpOrder.FUNCTION_CALL];\n}\n\n/**\n * Python block generator function.\n *\n * @param block The Block instance to generate code for.\n * @param generator The PythonGenerator calling the function.\n * @returns A tuple containing the code string and precedence.\n */\nexport function toPython(\n  block: Block,\n  generator: PythonGenerator,\n): [string, PythonOrder] {\n  // Generate a random colour.\n  // TODO(#7600): find better approach than casting to any to override\n  // CodeGenerator declaring .definitions protected.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (generator as any).definitions_['import_random'] = 'import random';\n  const code = \"'#%06x' % random.randint(0, 2**24 - 1)\";\n  return [code, PythonOrder.FUNCTION_CALL];\n}\n\nconst definitionsDict = BlocklyCommon.createBlockDefinitionsFromJsonArray([\n  jsonDefinition,\n]);\n\n/** The colour_random BlockDefinition. */\nexport const blockDefinition = definitionsDict[BLOCK_NAME];\n\n/**\n * Install the `colour_picker` block and all of its dependencies.\n *\n * @param gens The CodeGenerators to install per-block\n *     generators on.\n */\nexport function installBlock(gens: Generators = {}) {\n  registerFieldColour();\n  BlocklyCommon.defineBlocks(definitionsDict);\n  if (gens.javascript) gens.javascript.forBlock[BLOCK_NAME] = toJavascript;\n  if (gens.dart) gens.dart.forBlock[BLOCK_NAME] = toDart;\n  if (gens.lua) gens.lua.forBlock[BLOCK_NAME] = toLua;\n  if (gens.php) gens.php.forBlock[BLOCK_NAME] = toPhp;\n  if (gens.python) gens.python.forBlock[BLOCK_NAME] = toPython;\n}\n","/**\n * @license\n * Copyright 2024 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {Block, common as BlocklyCommon} from 'blockly/core';\nimport {\n  JavascriptGenerator,\n  Order as JavascriptOrder,\n} from 'blockly/javascript';\nimport {DartGenerator, Order as DartOrder} from 'blockly/dart';\nimport {LuaGenerator, Order as LuaOrder} from 'blockly/lua';\nimport {PhpGenerator, Order as PhpOrder} from 'blockly/php';\nimport {PythonGenerator, Order as PythonOrder} from 'blockly/python';\nimport {registerFieldColour} from '../field_colour';\nimport {Generators} from './generatorsType';\n\n/** The name this block is registered under. */\nexport const BLOCK_NAME = 'colour_rgb';\n\n// Block for composing a colour from RGB components.\nconst jsonDefinition = {\n  type: BLOCK_NAME,\n  message0:\n    '%{BKY_COLOUR_RGB_TITLE} %{BKY_COLOUR_RGB_RED} %1 %{BKY_COLOUR_RGB_GREEN} %2 %{BKY_COLOUR_RGB_BLUE} %3',\n  args0: [\n    {\n      type: 'input_value',\n      name: 'RED',\n      check: 'Number',\n      align: 'RIGHT',\n    },\n    {\n      type: 'input_value',\n      name: 'GREEN',\n      check: 'Number',\n      align: 'RIGHT',\n    },\n    {\n      type: 'input_value',\n      name: 'BLUE',\n      check: 'Number',\n      align: 'RIGHT',\n    },\n  ],\n  output: 'Colour',\n  helpUrl: '%{BKY_COLOUR_RGB_HELPURL}',\n  style: 'colour_blocks',\n  tooltip: '%{BKY_COLOUR_RGB_TOOLTIP}',\n};\n\n/**\n * Javascript block generator function.\n *\n * @param block The Block instance to generate code for.\n * @param generator The JavascriptGenerator calling the function.\n * @returns A tuple containing the code string and precedence.\n */\nexport function toJavascript(\n  block: Block,\n  generator: JavascriptGenerator,\n): [string, JavascriptOrder] {\n  // Compose a colour from RGB components expressed as percentages.\n  const red = generator.valueToCode(block, 'RED', JavascriptOrder.NONE) || 0;\n  const green =\n    generator.valueToCode(block, 'GREEN', JavascriptOrder.NONE) || 0;\n  const blue = generator.valueToCode(block, 'BLUE', JavascriptOrder.NONE) || 0;\n  const functionName = generator.provideFunction_(\n    'colourRgb',\n    `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(r, g, b) {\n  r = Math.max(Math.min(Number(r), 100), 0) * 2.55;\n  g = Math.max(Math.min(Number(g), 100), 0) * 2.55;\n  b = Math.max(Math.min(Number(b), 100), 0) * 2.55;\n  r = ('0' + (Math.round(r) || 0).toString(16)).slice(-2);\n  g = ('0' + (Math.round(g) || 0).toString(16)).slice(-2);\n  b = ('0' + (Math.round(b) || 0).toString(16)).slice(-2);\n  return '#' + r + g + b;\n}\n`,\n  );\n  const code = `${functionName}(${red}, ${green}, ${blue})`;\n  return [code, JavascriptOrder.FUNCTION_CALL];\n}\n\n/**\n * Dart block generator function.\n *\n * @param block The Block instance to generate code for.\n * @param generator The DartGenerator calling the function.\n * @returns A tuple containing the code string and precedence.\n */\nexport function toDart(\n  block: Block,\n  generator: DartGenerator,\n): [string, DartOrder] {\n  // Compose a colour from RGB components expressed as percentages.\n  const red = generator.valueToCode(block, 'RED', DartOrder.NONE) || 0;\n  const green = generator.valueToCode(block, 'GREEN', DartOrder.NONE) || 0;\n  const blue = generator.valueToCode(block, 'BLUE', DartOrder.NONE) || 0;\n\n  // TODO(#7600): find better approach than casting to any to override\n  // CodeGenerator declaring .definitions protected.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (generator as any).definitions_['import_dart_math'] =\n    \"import 'dart:math' as Math;\";\n  const functionName = generator.provideFunction_(\n    'colour_rgb',\n    `\nString ${generator.FUNCTION_NAME_PLACEHOLDER_}(num r, num g, num b) {\n  num rn = (Math.max(Math.min(r, 100), 0) * 2.55).round();\n  String rs = rn.toInt().toRadixString(16);\n  rs = '0$rs';\n  rs = rs.substring(rs.length - 2);\n  num gn = (Math.max(Math.min(g, 100), 0) * 2.55).round();\n  String gs = gn.toInt().toRadixString(16);\n  gs = '0$gs';\n  gs = gs.substring(gs.length - 2);\n  num bn = (Math.max(Math.min(b, 100), 0) * 2.55).round();\n  String bs = bn.toInt().toRadixString(16);\n  bs = '0$bs';\n  bs = bs.substring(bs.length - 2);\n  return '#$rs$gs$bs';\n}\n`,\n  );\n  const code = `${functionName}(${red}, ${green}, ${blue})`;\n  return [code, DartOrder.UNARY_POSTFIX];\n}\n\n/**\n * Lua block generator function.\n *\n * @param block The Block instance to generate code for.\n * @param generator The LuaGenerator calling the function.\n * @returns A tuple containing the code string and precedence.\n */\nexport function toLua(\n  block: Block,\n  generator: LuaGenerator,\n): [string, LuaOrder] {\n  // Compose a colour from RGB components expressed as percentages.\n  const functionName = generator.provideFunction_(\n    'colour_rgb',\n    `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(r, g, b)\n  r = math.floor(math.min(100, math.max(0, r)) * 2.55 + .5)\n  g = math.floor(math.min(100, math.max(0, g)) * 2.55 + .5)\n  b = math.floor(math.min(100, math.max(0, b)) * 2.55 + .5)\n  return string.format(\"#%02x%02x%02x\", r, g, b)\nend\n`,\n  );\n  const red = generator.valueToCode(block, 'RED', LuaOrder.NONE) || 0;\n  const green = generator.valueToCode(block, 'GREEN', LuaOrder.NONE) || 0;\n  const blue = generator.valueToCode(block, 'BLUE', LuaOrder.NONE) || 0;\n  const code = `${functionName}(${red}, ${green}, ${blue})`;\n  return [code, LuaOrder.HIGH];\n}\n\n/**\n * PHP block generator function.\n *\n * @param block The Block instance to generate code for.\n * @param generator The PhpGenerator calling the function.\n * @returns A tuple containing the code string and precedence.\n */\nexport function toPhp(\n  block: Block,\n  generator: PhpGenerator,\n): [string, PhpOrder] {\n  // Compose a colour from RGB components expressed as percentages.\n  const red = generator.valueToCode(block, 'RED', PhpOrder.NONE) || 0;\n  const green = generator.valueToCode(block, 'GREEN', PhpOrder.NONE) || 0;\n  const blue = generator.valueToCode(block, 'BLUE', PhpOrder.NONE) || 0;\n  const functionName = generator.provideFunction_(\n    'colour_rgb',\n    `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($r, $g, $b) {\n  $r = round(max(min($r, 100), 0) * 2.55);\n  $g = round(max(min($g, 100), 0) * 2.55);\n  $b = round(max(min($b, 100), 0) * 2.55);\n  $hex = '#';\n  $hex .= str_pad(dechex($r), 2, '0', STR_PAD_LEFT);\n  $hex .= str_pad(dechex($g), 2, '0', STR_PAD_LEFT);\n  $hex .= str_pad(dechex($b), 2, '0', STR_PAD_LEFT);\n  return $hex;\n}\n`,\n  );\n  const code = `${functionName}(${red}, ${green}, ${blue})`;\n  return [code, PhpOrder.FUNCTION_CALL];\n}\n\n/**\n * Python block generator function.\n *\n * @param block The Block instance to generate code for.\n * @param generator The PythonGenerator calling the function.\n * @returns A tuple containing the code string and precedence.\n */\nexport function toPython(\n  block: Block,\n  generator: PythonGenerator,\n): [string, PythonOrder] {\n  // Compose a colour from RGB components expressed as percentages.\n  const functionName = generator.provideFunction_(\n    'colour_rgb',\n    `\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(r, g, b):\n  r = round(min(100, max(0, r)) * 2.55)\n  g = round(min(100, max(0, g)) * 2.55)\n  b = round(min(100, max(0, b)) * 2.55)\n  return '#%02x%02x%02x' % (r, g, b)\n`,\n  );\n  const r = generator.valueToCode(block, 'RED', PythonOrder.NONE) || 0;\n  const g = generator.valueToCode(block, 'GREEN', PythonOrder.NONE) || 0;\n  const b = generator.valueToCode(block, 'BLUE', PythonOrder.NONE) || 0;\n  const code = functionName + '(' + r + ', ' + g + ', ' + b + ')';\n  return [code, PythonOrder.FUNCTION_CALL];\n}\n\nconst definitionsDict = BlocklyCommon.createBlockDefinitionsFromJsonArray([\n  jsonDefinition,\n]);\n\n/** The colour_rgb BlockDefinition. */\nexport const blockDefinition = definitionsDict[BLOCK_NAME];\n\n/**\n * Install the `colour_rgb` block and all of its dependencies.\n *\n * @param gens The CodeGenerators to install per-block\n *     generators on.\n */\nexport function installBlock(gens: Generators = {}) {\n  registerFieldColour();\n  BlocklyCommon.defineBlocks(definitionsDict);\n  if (gens.javascript) gens.javascript.forBlock[BLOCK_NAME] = toJavascript;\n  if (gens.dart) {\n    gens.dart.forBlock[BLOCK_NAME] = toDart;\n    gens.dart.addReservedWords('Math');\n  }\n  if (gens.lua) gens.lua.forBlock[BLOCK_NAME] = toLua;\n  if (gens.php) gens.php.forBlock[BLOCK_NAME] = toPhp;\n  if (gens.python) gens.python.forBlock[BLOCK_NAME] = toPython;\n}\n","/**\n * @license\n * Copyright 2024 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {Block, common as BlocklyCommon} from 'blockly/core';\nimport {\n  JavascriptGenerator,\n  Order as JavascriptOrder,\n} from 'blockly/javascript';\nimport {DartGenerator, Order as DartOrder} from 'blockly/dart';\nimport {LuaGenerator, Order as LuaOrder} from 'blockly/lua';\nimport {PhpGenerator, Order as PhpOrder} from 'blockly/php';\nimport {PythonGenerator, Order as PythonOrder} from 'blockly/python';\nimport {registerFieldColour} from '../field_colour';\nimport {Generators} from './generatorsType';\n\n/** The name this block is registered under. */\nexport const BLOCK_NAME = 'colour_blend';\n\n// Block for blending two colours together.\nconst jsonDefinition = {\n  type: BLOCK_NAME,\n  message0:\n    '%{BKY_COLOUR_BLEND_TITLE} %{BKY_COLOUR_BLEND_COLOUR1} ' +\n    '%1 %{BKY_COLOUR_BLEND_COLOUR2} %2 %{BKY_COLOUR_BLEND_RATIO} %3',\n  args0: [\n    {\n      type: 'input_value',\n      name: 'COLOUR1',\n      check: 'Colour',\n      align: 'RIGHT',\n    },\n    {\n      type: 'input_value',\n      name: 'COLOUR2',\n      check: 'Colour',\n      align: 'RIGHT',\n    },\n    {\n      type: 'input_value',\n      name: 'RATIO',\n      check: 'Number',\n      align: 'RIGHT',\n    },\n  ],\n  output: 'Colour',\n  helpUrl: '%{BKY_COLOUR_BLEND_HELPURL}',\n  style: 'colour_blocks',\n  tooltip: '%{BKY_COLOUR_BLEND_TOOLTIP}',\n};\n\n/**\n * Javascript block generator function.\n *\n * @param block The Block instance to generate code for.\n * @param generator The JavascriptGenerator calling the function.\n * @returns A tuple containing the code string and precedence.\n */\nexport function toJavascript(\n  block: Block,\n  generator: JavascriptGenerator,\n): [string, JavascriptOrder] {\n  // Blend two colours together.\n  const colour1 =\n    generator.valueToCode(block, 'COLOUR1', JavascriptOrder.NONE) ||\n    \"'#000000'\";\n  const colour2 =\n    generator.valueToCode(block, 'COLOUR2', JavascriptOrder.NONE) ||\n    \"'#000000'\";\n  const ratio =\n    generator.valueToCode(block, 'RATIO', JavascriptOrder.NONE) || 0.5;\n  const functionName = generator.provideFunction_(\n    'colourBlend',\n    `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(c1, c2, ratio) {\n  ratio = Math.max(Math.min(Number(ratio), 1), 0);\n  var r1 = parseInt(c1.substring(1, 3), 16);\n  var g1 = parseInt(c1.substring(3, 5), 16);\n  var b1 = parseInt(c1.substring(5, 7), 16);\n  var r2 = parseInt(c2.substring(1, 3), 16);\n  var g2 = parseInt(c2.substring(3, 5), 16);\n  var b2 = parseInt(c2.substring(5, 7), 16);\n  var r = Math.round(r1 * (1 - ratio) + r2 * ratio);\n  var g = Math.round(g1 * (1 - ratio) + g2 * ratio);\n  var b = Math.round(b1 * (1 - ratio) + b2 * ratio);\n  r = ('0' + (r || 0).toString(16)).slice(-2);\n  g = ('0' + (g || 0).toString(16)).slice(-2);\n  b = ('0' + (b || 0).toString(16)).slice(-2);\n  return '#' + r + g + b;\n}\n`,\n  );\n  const code = `${functionName}(${colour1}, ${colour2}, ${ratio})`;\n  return [code, JavascriptOrder.FUNCTION_CALL];\n}\n\n/**\n * Dart block generator function.\n *\n * @param block The Block instance to generate code for.\n * @param generator The DartGenerator calling the function.\n * @returns A tuple containing the code string and precedence.\n */\nexport function toDart(\n  block: Block,\n  generator: DartGenerator,\n): [string, DartOrder] {\n  // Blend two colours together.\n  const colour1 =\n    generator.valueToCode(block, 'COLOUR1', DartOrder.NONE) || \"'#000000'\";\n  const colour2 =\n    generator.valueToCode(block, 'COLOUR2', DartOrder.NONE) || \"'#000000'\";\n  const ratio = generator.valueToCode(block, 'RATIO', DartOrder.NONE) || 0.5;\n\n  // TODO(#7600): find better approach than casting to any to override\n  // CodeGenerator declaring .definitions protected.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (generator as any).definitions_['import_dart_math'] =\n    \"import 'dart:math' as Math;\";\n  const functionName = generator.provideFunction_(\n    'colour_blend',\n    `\nString ${generator.FUNCTION_NAME_PLACEHOLDER_}(String c1, String c2, num ratio) {\n  ratio = Math.max(Math.min(ratio, 1), 0);\n  int r1 = int.parse('0x\\${c1.substring(1, 3)}');\n  int g1 = int.parse('0x\\${c1.substring(3, 5)}');\n  int b1 = int.parse('0x\\${c1.substring(5, 7)}');\n  int r2 = int.parse('0x\\${c2.substring(1, 3)}');\n  int g2 = int.parse('0x\\${c2.substring(3, 5)}');\n  int b2 = int.parse('0x\\${c2.substring(5, 7)}');\n  num rn = (r1 * (1 - ratio) + r2 * ratio).round();\n  String rs = rn.toInt().toRadixString(16);\n  num gn = (g1 * (1 - ratio) + g2 * ratio).round();\n  String gs = gn.toInt().toRadixString(16);\n  num bn = (b1 * (1 - ratio) + b2 * ratio).round();\n  String bs = bn.toInt().toRadixString(16);\n  rs = '0$rs';\n  rs = rs.substring(rs.length - 2);\n  gs = '0$gs';\n  gs = gs.substring(gs.length - 2);\n  bs = '0$bs';\n  bs = bs.substring(bs.length - 2);\n  return '#$rs$gs$bs';\n}\n`,\n  );\n  const code = `${functionName}(${colour1}, ${colour2}, ${ratio})`;\n  return [code, DartOrder.UNARY_POSTFIX];\n}\n\n/**\n * Lua generator definition.\n *\n * @param block The Block instance to generate code for.\n * @param generator The LuaGenerator calling the function.\n * @returns A tuple containing the code string and precedence.\n */\nexport function toLua(\n  block: Block,\n  generator: LuaGenerator,\n): [string, LuaOrder] {\n  // Blend two colours together.\n  const functionName = generator.provideFunction_(\n    'colour_blend',\n    `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(colour1, colour2, ratio)\n  local r1 = tonumber(string.sub(colour1, 2, 3), 16)\n  local r2 = tonumber(string.sub(colour2, 2, 3), 16)\n  local g1 = tonumber(string.sub(colour1, 4, 5), 16)\n  local g2 = tonumber(string.sub(colour2, 4, 5), 16)\n  local b1 = tonumber(string.sub(colour1, 6, 7), 16)\n  local b2 = tonumber(string.sub(colour2, 6, 7), 16)\n  local ratio = math.min(1, math.max(0, ratio))\n  local r = math.floor(r1 * (1 - ratio) + r2 * ratio + .5)\n  local g = math.floor(g1 * (1 - ratio) + g2 * ratio + .5)\n  local b = math.floor(b1 * (1 - ratio) + b2 * ratio + .5)\n  return string.format(\"#%02x%02x%02x\", r, g, b)\nend\n`,\n  );\n  const colour1 =\n    generator.valueToCode(block, 'COLOUR1', LuaOrder.NONE) || \"'#000000'\";\n  const colour2 =\n    generator.valueToCode(block, 'COLOUR2', LuaOrder.NONE) || \"'#000000'\";\n  const ratio = generator.valueToCode(block, 'RATIO', LuaOrder.NONE) || 0;\n  const code = `${functionName}(${colour1}, ${colour2}, ${ratio})`;\n  return [code, LuaOrder.HIGH];\n}\n\n/**\n * PHP generator definition.\n *\n * @param block The Block instance to generate code for.\n * @param generator The PhpGenerator calling the function.\n * @returns A tuple containing the code string and precedence.\n */\nexport function toPhp(\n  block: Block,\n  generator: PhpGenerator,\n): [string, PhpOrder] {\n  // Blend two colours together.\n  const colour1 =\n    generator.valueToCode(block, 'COLOUR1', PhpOrder.NONE) || \"'#000000'\";\n  const colour2 =\n    generator.valueToCode(block, 'COLOUR2', PhpOrder.NONE) || \"'#000000'\";\n  const ratio = generator.valueToCode(block, 'RATIO', PhpOrder.NONE) || 0.5;\n  const functionName = generator.provideFunction_(\n    'colour_blend',\n    `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($c1, $c2, $ratio) {\n  $ratio = max(min($ratio, 1), 0);\n  $r1 = hexdec(substr($c1, 1, 2));\n  $g1 = hexdec(substr($c1, 3, 2));\n  $b1 = hexdec(substr($c1, 5, 2));\n  $r2 = hexdec(substr($c2, 1, 2));\n  $g2 = hexdec(substr($c2, 3, 2));\n  $b2 = hexdec(substr($c2, 5, 2));\n  $r = round($r1 * (1 - $ratio) + $r2 * $ratio);\n  $g = round($g1 * (1 - $ratio) + $g2 * $ratio);\n  $b = round($b1 * (1 - $ratio) + $b2 * $ratio);\n  $hex = '#';\n  $hex .= str_pad(dechex($r), 2, '0', STR_PAD_LEFT);\n  $hex .= str_pad(dechex($g), 2, '0', STR_PAD_LEFT);\n  $hex .= str_pad(dechex($b), 2, '0', STR_PAD_LEFT);\n  return $hex;\n}\n`,\n  );\n  const code = `${functionName}(${colour1}, ${colour2}, ${ratio})`;\n  return [code, PhpOrder.FUNCTION_CALL];\n}\n\n/**\n * Python generator definition.\n *\n * @param block The Block instance to generate code for.\n * @param generator The PythonGenerator calling the function.\n * @returns A tuple containing the code string and precedence.\n */\nexport function toPython(\n  block: Block,\n  generator: PythonGenerator,\n): [string, PythonOrder] {\n  // Blend two colours together.\n  const functionName = generator.provideFunction_(\n    'colour_blend',\n    `\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(colour1, colour2, ratio):\n  r1, r2 = int(colour1[1:3], 16), int(colour2[1:3], 16)\n  g1, g2 = int(colour1[3:5], 16), int(colour2[3:5], 16)\n  b1, b2 = int(colour1[5:7], 16), int(colour2[5:7], 16)\n  ratio = min(1, max(0, ratio))\n  r = round(r1 * (1 - ratio) + r2 * ratio)\n  g = round(g1 * (1 - ratio) + g2 * ratio)\n  b = round(b1 * (1 - ratio) + b2 * ratio)\n  return '#%02x%02x%02x' % (r, g, b)\n`,\n  );\n  const colour1 =\n    generator.valueToCode(block, 'COLOUR1', PythonOrder.NONE) || \"'#000000'\";\n  const colour2 =\n    generator.valueToCode(block, 'COLOUR2', PythonOrder.NONE) || \"'#000000'\";\n  const ratio = generator.valueToCode(block, 'RATIO', PythonOrder.NONE) || 0;\n  const code = `${functionName}(${colour1}, ${colour2}, ${ratio})`;\n  return [code, PythonOrder.FUNCTION_CALL];\n}\n\nconst definitionsDict = BlocklyCommon.createBlockDefinitionsFromJsonArray([\n  jsonDefinition,\n]);\n\n/** The colour_blend BlockDefinition. */\nexport const blockDefinition = definitionsDict[BLOCK_NAME];\n\n/**\n * Install the `colour_blend` block and all of its dependencies.\n *\n * @param gens The CodeGenerators to install per-block\n *     generators on.\n */\nexport function installBlock(gens: Generators = {}) {\n  registerFieldColour();\n  BlocklyCommon.defineBlocks(definitionsDict);\n  if (gens.javascript) gens.javascript.forBlock[BLOCK_NAME] = toJavascript;\n  if (gens.dart) {\n    gens.dart.forBlock[BLOCK_NAME] = toDart;\n    gens.dart.addReservedWords('Math');\n  }\n  if (gens.lua) gens.lua.forBlock[BLOCK_NAME] = toLua;\n  if (gens.php) gens.php.forBlock[BLOCK_NAME] = toPhp;\n  if (gens.python) gens.python.forBlock[BLOCK_NAME] = toPython;\n}\n","/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './field_colour';\n\nimport * as colourPicker from './blocks/colourPicker';\nimport * as colourRandom from './blocks/colourRandom';\nimport * as colourRgb from './blocks/colourRgb';\nimport * as colourBlend from './blocks/colourBlend';\nimport {Generators} from './blocks/generatorsType';\n\n// Re-export all parts of the definition.\nexport * as colourPicker from './blocks/colourPicker';\nexport * as colourRandom from './blocks/colourRandom';\nexport * as colourRgb from './blocks/colourRgb';\nexport * as colourBlend from './blocks/colourBlend';\n\n/**\n * Install all of the blocks defined in this file and all of their\n * dependencies.\n *\n * @param generators The CodeGenerators to install per-block\n *     generators on.\n */\nexport function installAllBlocks(generators: Generators = {}) {\n  colourPicker.installBlock(generators);\n  colourRgb.installBlock(generators);\n  colourRandom.installBlock(generators);\n  colourBlend.installBlock(generators);\n}\n"],"names":["root","factory","exports","module","require","define","amd","a","i","this","__WEBPACK_EXTERNAL_MODULE__370__","__WEBPACK_EXTERNAL_MODULE__127__","__WEBPACK_EXTERNAL_MODULE__379__","__WEBPACK_EXTERNAL_MODULE__157__","__WEBPACK_EXTERNAL_MODULE__537__","__WEBPACK_EXTERNAL_MODULE__557__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","FieldColour","constructor","validator","config","super","SKIP_SETUP","picker","highlightedIndex","boundEvents","SERIALIZABLE","CURSOR","isDirty_","colours","titles","columns","configure_","setValue","setValidator","colourOptions","colourTitles","initView","constants","getConstants","Error","size_","Size","FIELD_COLOUR_DEFAULT_WIDTH","FIELD_COLOUR_DEFAULT_HEIGHT","createBorderRect_","getBorderRect","style","setAttribute","isFullBlockField","clickTarget_","sourceBlock_","getSvgRoot","getSourceBlock","blockIsSimpleReporter","Boolean","FIELD_COLOUR_FULL_BLOCK","block","outputConnection","input","inputList","connection","fieldRow","length","applyColour","fieldGroup_","borderRect","borderRect_","display","pathObject","svgPath","getValue","fill","getSize","render_","updateSize_","margin","totalWidth","totalHeight","FIELD_TEXT_HEIGHT","height","width","positionBorderRect_","doClassValidation_","newValue","colour","parse","getText","value_","test","setColours","setColumns","showEditor_","dropdownCreate","getContentDiv","appendChild","showPositionedByField","dropdownDispose","bind","focus","preventScroll","onClick","e","cell","target","getAttribute","hideIfOwner","onKeyDown","highlighted","handled","moveHighlightBy","getHighlighted","hideWithoutAnimation","stopPropagation","dx","dy","x","y","Math","floor","childNodes","index","setHighlightedCell","onMouseMove","Number","onMouseEnter","onMouseLeave","blur","dom","removeClass","row","addClass","cellId","aria","setState","State","ACTIVEDESCENDANT","selectedColour","table","document","createElement","className","tabIndex","dir","setRole","Role","GRID","EXPANDED","ROWCOUNT","COLCOUNT","ROW","title","id","idGenerator","getNextUniqueId","GRIDCELL","LABEL","SELECTED","backgroundColor","push","conditionalBind","event","unbind","fromJson","options","registerFieldColour","unregister","register","DEFAULT_VALUE","BLOCK_NAME","jsonDefinition","type","message0","args0","name","output","helpUrl","tooltip","extensions","toJavascript","generator","quote_","getFieldValue","ATOMIC","toDart","toLua","toPhp","toPython","definitionsDict","createBlockDefinitionsFromJsonArray","blockDefinition","installBlock","gens","defineBlocks","javascript","forBlock","dart","lua","php","python","provideFunction_","FUNCTION_NAME_PLACEHOLDER_","FUNCTION_CALL","definitions_","UNARY_POSTFIX","HIGH","check","align","red","valueToCode","NONE","green","blue","addReservedWords","colour1","colour2","ratio","installAllBlocks","generators"],"sourceRoot":""}